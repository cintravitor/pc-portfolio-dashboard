/**
 * UI Cards Module
 * Handles product card rendering and statistics display
 * 
 * Part of the modular UI architecture refactor
 * @module ui-cards
 */

(function() {
    'use strict';
    
    // Track expanded sections
    const expandedSections = new Set();
    
    /**
     * Render product cards grouped by P&C Area with collapsible sections
     */
    function renderCards() {
        const container = document.getElementById('cards-container');
        const emptyState = document.getElementById('empty-state');
        const filteredData = window.DataManager.getFilteredData();

        if (filteredData.length === 0) {
            container.classList.add('hidden');
            emptyState.classList.remove('hidden');
            return;
        }

        emptyState.classList.add('hidden');
        container.classList.remove('hidden');

        // Group products by P&C Area
        const groupedByArea = {};
        filteredData.forEach(product => {
            const area = product.area || 'Uncategorized';
            if (!groupedByArea[area]) {
                groupedByArea[area] = [];
            }
            groupedByArea[area].push(product);
        });

        // Sort areas alphabetically
        const sortedAreas = Object.keys(groupedByArea).sort();

        // Render collapsible sections
        container.innerHTML = sortedAreas.map(area => {
            const products = groupedByArea[area];
            const isExpanded = expandedSections.has(area);
            
            const cardsHtml = products.map(product => {
                const summary = window.DataManager.getCardSummaryMetrics(product);
                
                // Generate metric status indicators
                const uxIndicator = getMetricIndicator('UX', summary.uxStatus, summary.uxMetric, summary.uxValue, summary.uxTarget);
                const biIndicator = getMetricIndicator('BI', summary.biStatus, summary.biMetric, summary.biValue, summary.biTarget);
                
                // Get platform and automation info
                const platformInfo = getPlatformInfo(product.platform);
                const automationInfo = getAutomationInfo(product);
                
                return `
                <div class="product-card product-card-compact fade-in" data-product-id="${product.id}">
                    <div class="card-header-compact">
                        <div class="card-title-compact">
                            ${window.Utils.escapeHtml(product.name)}
                        </div>
                        <span class="status-badge-compact ${window.Utils.getStatusClass(summary.maturity)}">
                            ${window.Utils.escapeHtml(summary.maturity)}
                        </span>
                    </div>
                    
                    <div class="card-body-compact">
                        <div class="card-meta-row">
                            <div class="card-meta-item">
                                <span class="meta-icon">👤</span>
                                <span class="meta-text">${window.Utils.truncateText(window.Utils.escapeHtml(summary.owner), 25)}</span>
                            </div>
                        </div>
                        
                        <div class="card-problem">
                            ${window.Utils.truncateText(window.Utils.escapeHtml(summary.problem), 80)}
                        </div>
                        
                        <div class="card-technical-info">
                            <div class="technical-info-row">
                                <span class="info-label">Platform:</span>
                                <span class="platform-badge">${platformInfo}</span>
                            </div>
                            <div class="technical-info-row">
                                <span class="info-label">Metrics:</span>
                                <span class="automation-badge ${automationInfo.class}">${automationInfo.icon} ${automationInfo.text}</span>
                            </div>
                        </div>
                        
                        <div class="card-metrics">
                            <div class="metric-label">Performance:</div>
                            <div class="metric-indicators">
                                ${uxIndicator}
                                ${biIndicator}
                            </div>
                        </div>
                    </div>
                </div>
                `;
            }).join('');
            
            return `
            <div class="area-section" data-area="${window.Utils.escapeHtml(area)}">
                <div class="area-header" onclick="window.UIManager.Cards.toggleArea('${window.Utils.escapeHtml(area).replace(/'/g, "\\'")}')">
                    <div class="area-header-content">
                        <span class="area-toggle-icon">${isExpanded ? '−' : '+'}</span>
                        <h3 class="area-title">${window.Utils.escapeHtml(area)}</h3>
                        <span class="area-count">(${products.length})</span>
                    </div>
                </div>
                <div class="area-cards ${isExpanded ? 'expanded' : 'collapsed'}">
                    ${cardsHtml}
                </div>
            </div>
            `;
        }).join('');
    }
    
    /**
     * Get platform information with icon
     */
    function getPlatformInfo(platform) {
        if (!platform || platform.trim() === '') {
            return '<span class="platform-empty">Not specified</span>';
        }
        
        // Extract and format platform names
        const platforms = platform.split(',').map(p => p.trim()).filter(p => p);
        if (platforms.length === 0) {
            return '<span class="platform-empty">Not specified</span>';
        }
        
        // Map platforms to icons
        const platformIcons = {
            'Web': '🌐',
            'Mobile': '📱',
            'Desktop': '💻',
            'API': '🔌',
            'Email': '📧',
            'SMS': '📨',
            'Excel': '📊',
            'SharePoint': '📁',
            'Teams': '💬'
        };
        
        // Get icon or use default
        const firstPlatform = platforms[0];
        const icon = platformIcons[firstPlatform] || '📦';
        
        if (platforms.length === 1) {
            return `${icon} ${window.Utils.escapeHtml(firstPlatform)}`;
        } else {
            return `${icon} ${window.Utils.escapeHtml(firstPlatform)} +${platforms.length - 1}`;
        }
    }
    
    /**
     * Get automation status information
     */
    function getAutomationInfo(product) {
        // Check if metrics are automated or manual
        // Look at the data extraction field if it exists
        const hasUXData = product.monthlyUX && product.monthlyUX.some(val => val && val !== '' && val !== '0');
        const hasBIData = product.monthlyBI && product.monthlyBI.some(val => val && val !== '' && val !== '0');
        
        if (hasUXData && hasBIData) {
            return {
                icon: '✓',
                text: 'Automated',
                class: 'automation-automated'
            };
        } else if (hasUXData || hasBIData) {
            return {
                icon: '⚠',
                text: 'Partial',
                class: 'automation-partial'
            };
        } else {
            return {
                icon: '○',
                text: 'Manual',
                class: 'automation-manual'
            };
        }
    }
    
    /**
     * Toggle area section expansion
     */
    function toggleArea(area) {
        if (expandedSections.has(area)) {
            expandedSections.delete(area);
        } else {
            expandedSections.add(area);
        }
        renderCards();
    }
    
    /**
     * Expand specific areas (used by filtering)
     */
    function expandAreas(areas) {
        areas.forEach(area => expandedSections.add(area));
        renderCards();
    }
    
    /**
     * Collapse all areas
     */
    function collapseAllAreas() {
        expandedSections.clear();
        renderCards();
    }
    
    /**
     * Generate metric indicator HTML
     */
    function getMetricIndicator(label, status, metricName, value, target) {
        let icon, tooltip, statusClass;
        
        switch (status) {
            case 'green':
                icon = '🟢';
                statusClass = 'metric-green';
                tooltip = `${label}: ${metricName}\nCurrent: ${value !== null ? value.toFixed(1) : 'N/A'} | Target: ${target !== null ? target.toFixed(1) : 'N/A'}\n✓ Meeting target`;
                break;
            case 'red':
                icon = '🔴';
                statusClass = 'metric-red';
                tooltip = `${label}: ${metricName}\nCurrent: ${value !== null ? value.toFixed(1) : 'N/A'} | Target: ${target !== null ? target.toFixed(1) : 'N/A'}\n✗ Below target`;
                break;
            case 'gray':
            default:
                icon = '⚪';
                statusClass = 'metric-gray';
                tooltip = `${label}: ${metricName === 'N/A' ? 'Not defined' : 'No data available'}`;
                break;
        }
        
        return `
            <div class="metric-indicator ${statusClass}" title="${tooltip}">
                <span class="metric-icon">${icon}</span>
                <span class="metric-label-text">${label}</span>
            </div>
        `;
    }
    
    /**
     * Update statistics display
     */
    function updateStats() {
        const statsBar = document.getElementById('stats-bar');
        statsBar.style.display = 'flex';

        const stats = window.DataManager.getProductStats();
        const missingMetrics = window.DataManager.countMissingMetrics();
        
        document.getElementById('stat-total').textContent = stats.total;
        document.getElementById('stat-showing').textContent = stats.showing;
        document.getElementById('stat-live').textContent = stats.live;
        document.getElementById('stat-dev').textContent = stats.dev;
        
        // Update data quality cards
        document.getElementById('stat-missing-ux').textContent = missingMetrics.missingUX;
        document.getElementById('stat-missing-bi').textContent = missingMetrics.missingBI;
    }
    
    /**
     * Update last fetch time display
     */
    function updateLastUpdateDisplay() {
        const lastUpdate = window.DataManager.getLastUpdateTime();
        if (lastUpdate) {
            document.getElementById('last-update').textContent = `Last updated: ${lastUpdate.toLocaleString()}`;
        }
    }
    
    // Export to window.UIManager.Cards namespace
    if (!window.UIManager) window.UIManager = {};
    window.UIManager.Cards = {
        render: renderCards,
        updateStats,
        updateLastUpdateDisplay,
        toggleArea,
        expandAreas,
        collapseAllAreas
    };
    
    console.log('✅ UI Cards module loaded');
})();
